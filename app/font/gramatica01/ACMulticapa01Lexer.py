# Generated from ACMulticapa01.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,18,152,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,0,1,0,
        1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
        1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,
        14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,5,15,127,8,15,10,
        15,12,15,130,9,15,1,16,4,16,133,8,16,11,16,12,16,134,1,16,1,16,5,
        16,139,8,16,10,16,12,16,142,9,16,3,16,144,8,16,1,17,4,17,147,8,17,
        11,17,12,17,148,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,1,0,
        4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        3,0,9,10,13,13,32,32,156,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
        1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,
        1,0,0,0,3,42,1,0,0,0,5,44,1,0,0,0,7,46,1,0,0,0,9,52,1,0,0,0,11,54,
        1,0,0,0,13,56,1,0,0,0,15,68,1,0,0,0,17,76,1,0,0,0,19,86,1,0,0,0,
        21,97,1,0,0,0,23,104,1,0,0,0,25,110,1,0,0,0,27,113,1,0,0,0,29,116,
        1,0,0,0,31,124,1,0,0,0,33,132,1,0,0,0,35,146,1,0,0,0,37,38,5,67,
        0,0,38,39,5,65,0,0,39,40,5,80,0,0,40,41,5,65,0,0,41,2,1,0,0,0,42,
        43,5,123,0,0,43,4,1,0,0,0,44,45,5,125,0,0,45,6,1,0,0,0,46,47,5,67,
        0,0,47,48,5,69,0,0,48,49,5,76,0,0,49,50,5,68,0,0,50,51,5,65,0,0,
        51,8,1,0,0,0,52,53,5,40,0,0,53,10,1,0,0,0,54,55,5,41,0,0,55,12,1,
        0,0,0,56,57,5,83,0,0,57,58,5,85,0,0,58,59,5,83,0,0,59,60,5,67,0,
        0,60,61,5,69,0,0,61,62,5,80,0,0,62,63,5,84,0,0,63,64,5,73,0,0,64,
        65,5,66,0,0,65,66,5,76,0,0,66,67,5,69,0,0,67,14,1,0,0,0,68,69,5,
        69,0,0,69,70,5,88,0,0,70,71,5,80,0,0,71,72,5,79,0,0,72,73,5,83,0,
        0,73,74,5,69,0,0,74,75,5,68,0,0,75,16,1,0,0,0,76,77,5,73,0,0,77,
        78,5,78,0,0,78,79,5,70,0,0,79,80,5,69,0,0,80,81,5,67,0,0,81,82,5,
        84,0,0,82,83,5,65,0,0,83,84,5,68,0,0,84,85,5,79,0,0,85,18,1,0,0,
        0,86,87,5,82,0,0,87,88,5,69,0,0,88,89,5,67,0,0,89,90,5,85,0,0,90,
        91,5,80,0,0,91,92,5,69,0,0,92,93,5,82,0,0,93,94,5,65,0,0,94,95,5,
        68,0,0,95,96,5,79,0,0,96,20,1,0,0,0,97,98,5,77,0,0,98,99,5,85,0,
        0,99,100,5,69,0,0,100,101,5,82,0,0,101,102,5,84,0,0,102,103,5,79,
        0,0,103,22,1,0,0,0,104,105,5,82,0,0,105,106,5,69,0,0,106,107,5,71,
        0,0,107,108,5,76,0,0,108,109,5,65,0,0,109,24,1,0,0,0,110,111,5,45,
        0,0,111,112,5,62,0,0,112,26,1,0,0,0,113,114,5,83,0,0,114,115,5,73,
        0,0,115,28,1,0,0,0,116,117,5,86,0,0,117,118,5,69,0,0,118,119,5,67,
        0,0,119,120,5,73,0,0,120,121,5,78,0,0,121,122,5,79,0,0,122,123,5,
        83,0,0,123,30,1,0,0,0,124,128,7,0,0,0,125,127,7,1,0,0,126,125,1,
        0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,32,1,0,
        0,0,130,128,1,0,0,0,131,133,7,2,0,0,132,131,1,0,0,0,133,134,1,0,
        0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,143,1,0,0,0,136,140,5,46,
        0,0,137,139,7,2,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,
        0,0,140,141,1,0,0,0,141,144,1,0,0,0,142,140,1,0,0,0,143,136,1,0,
        0,0,143,144,1,0,0,0,144,34,1,0,0,0,145,147,7,3,0,0,146,145,1,0,0,
        0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,
        0,150,151,6,17,0,0,151,36,1,0,0,0,6,0,128,134,140,143,148,1,6,0,
        0
    ]

class ACMulticapa01Lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    STRING = 16
    NUMBER = 17
    WS = 18

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'CAPA'", "'{'", "'}'", "'CELDA'", "'('", "')'", "'SUSCEPTIBLE'", 
            "'EXPOSED'", "'INFECTADO'", "'RECUPERADO'", "'MUERTO'", "'REGLA'", 
            "'->'", "'SI'", "'VECINOS'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "NUMBER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "STRING", "NUMBER", "WS" ]

    grammarFileName = "ACMulticapa01.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


