# Generated from ACMulticapa.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,22,173,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,18,1,18,1,18,1,19,1,19,5,19,148,8,19,10,19,12,19,151,
        9,19,1,20,4,20,154,8,20,11,20,12,20,155,1,20,1,20,5,20,160,8,20,
        10,20,12,20,163,9,20,3,20,165,8,20,1,21,4,21,168,8,21,11,21,12,21,
        169,1,21,1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,1,0,4,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        1,0,48,57,3,0,9,10,13,13,32,32,177,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,45,1,0,
        0,0,3,50,1,0,0,0,5,52,1,0,0,0,7,54,1,0,0,0,9,60,1,0,0,0,11,62,1,
        0,0,0,13,64,1,0,0,0,15,73,1,0,0,0,17,75,1,0,0,0,19,77,1,0,0,0,21,
        89,1,0,0,0,23,97,1,0,0,0,25,107,1,0,0,0,27,118,1,0,0,0,29,125,1,
        0,0,0,31,131,1,0,0,0,33,134,1,0,0,0,35,137,1,0,0,0,37,142,1,0,0,
        0,39,145,1,0,0,0,41,153,1,0,0,0,43,167,1,0,0,0,45,46,5,67,0,0,46,
        47,5,65,0,0,47,48,5,80,0,0,48,49,5,65,0,0,49,2,1,0,0,0,50,51,5,123,
        0,0,51,4,1,0,0,0,52,53,5,125,0,0,53,6,1,0,0,0,54,55,5,67,0,0,55,
        56,5,69,0,0,56,57,5,76,0,0,57,58,5,68,0,0,58,59,5,65,0,0,59,8,1,
        0,0,0,60,61,5,40,0,0,61,10,1,0,0,0,62,63,5,41,0,0,63,12,1,0,0,0,
        64,65,5,86,0,0,65,66,5,69,0,0,66,67,5,67,0,0,67,68,5,73,0,0,68,69,
        5,78,0,0,69,70,5,68,0,0,70,71,5,65,0,0,71,72,5,68,0,0,72,14,1,0,
        0,0,73,74,5,44,0,0,74,16,1,0,0,0,75,76,5,46,0,0,76,18,1,0,0,0,77,
        78,5,83,0,0,78,79,5,85,0,0,79,80,5,83,0,0,80,81,5,67,0,0,81,82,5,
        69,0,0,82,83,5,80,0,0,83,84,5,84,0,0,84,85,5,73,0,0,85,86,5,66,0,
        0,86,87,5,76,0,0,87,88,5,69,0,0,88,20,1,0,0,0,89,90,5,69,0,0,90,
        91,5,88,0,0,91,92,5,80,0,0,92,93,5,79,0,0,93,94,5,83,0,0,94,95,5,
        69,0,0,95,96,5,68,0,0,96,22,1,0,0,0,97,98,5,73,0,0,98,99,5,78,0,
        0,99,100,5,70,0,0,100,101,5,69,0,0,101,102,5,67,0,0,102,103,5,84,
        0,0,103,104,5,65,0,0,104,105,5,68,0,0,105,106,5,79,0,0,106,24,1,
        0,0,0,107,108,5,82,0,0,108,109,5,69,0,0,109,110,5,67,0,0,110,111,
        5,85,0,0,111,112,5,80,0,0,112,113,5,69,0,0,113,114,5,82,0,0,114,
        115,5,65,0,0,115,116,5,68,0,0,116,117,5,79,0,0,117,26,1,0,0,0,118,
        119,5,77,0,0,119,120,5,85,0,0,120,121,5,69,0,0,121,122,5,82,0,0,
        122,123,5,84,0,0,123,124,5,79,0,0,124,28,1,0,0,0,125,126,5,82,0,
        0,126,127,5,69,0,0,127,128,5,71,0,0,128,129,5,76,0,0,129,130,5,65,
        0,0,130,30,1,0,0,0,131,132,5,45,0,0,132,133,5,62,0,0,133,32,1,0,
        0,0,134,135,5,83,0,0,135,136,5,73,0,0,136,34,1,0,0,0,137,138,5,82,
        0,0,138,139,5,65,0,0,139,140,5,84,0,0,140,141,5,69,0,0,141,36,1,
        0,0,0,142,143,5,69,0,0,143,144,5,78,0,0,144,38,1,0,0,0,145,149,7,
        0,0,0,146,148,7,1,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,1,
        0,0,0,149,150,1,0,0,0,150,40,1,0,0,0,151,149,1,0,0,0,152,154,7,2,
        0,0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,1,0,
        0,0,156,164,1,0,0,0,157,161,5,46,0,0,158,160,7,2,0,0,159,158,1,0,
        0,0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,165,1,0,
        0,0,163,161,1,0,0,0,164,157,1,0,0,0,164,165,1,0,0,0,165,42,1,0,0,
        0,166,168,7,3,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,
        0,169,170,1,0,0,0,170,171,1,0,0,0,171,172,6,21,0,0,172,44,1,0,0,
        0,6,0,149,155,161,164,169,1,6,0,0
    ]

class ACMulticapaLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    ID = 20
    NUMBER = 21
    WS = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'CAPA'", "'{'", "'}'", "'CELDA'", "'('", "')'", "'VECINDAD'", 
            "','", "'.'", "'SUSCEPTIBLE'", "'EXPOSED'", "'INFECTADO'", "'RECUPERADO'", 
            "'MUERTO'", "'REGLA'", "'->'", "'SI'", "'RATE'", "'EN'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "ID", "NUMBER", 
                  "WS" ]

    grammarFileName = "ACMulticapa.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


